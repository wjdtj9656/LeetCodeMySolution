/**
 * @param {number[][]} grid
 * @param {number} k
 * @return {number}
 */
var shortestPath = function(grid, k) {
    let visited = new Set();
  visited.add(`0-0-${k}`);
  let dx=[0,0,-1,1];
  let dy=[-1,1,0,0];
  let q=[];
  let m = grid.length;
  let n = grid[0].length;
  q.push([0,0,k,0]);
  while(q.length != 0){
    let now = q.shift();
    console.log(now[0],now[1],now[2]);
    if(now[0] == m-1 && now[1] ==n-1) return now[3];
    for(let i=0; i<4; i++){
      let nx = now[0] + dx[i];
      let ny = now[1] + dy[i];
      if(nx<0 || ny<0 || nx>=m || ny>=n) continue;
      if(visited.has(`${nx}-${ny}-${now[2]}`))continue;
      if(grid[nx][ny] == 1 && now[2] > 0){
        q.push([nx,ny,now[2]-1,now[3]+1]);
        visited.add((`${nx}-${ny}-${now[2]}`));
      }
      else if(grid[nx][ny] == 0){
         q.push([nx,ny,now[2],now[3]+1]);
        visited.add((`${nx}-${ny}-${now[2]}`));
      }
      
    }
  }
  return -1;
};